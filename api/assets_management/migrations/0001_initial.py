# Generated by Django 5.2.3 on 2025-06-12 10:23

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('nist_subcategory', models.CharField(blank=True, help_text='NIST CSF subcategory identifier (e.g., ID.AM-1)', max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetValueMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('qualitative_value', models.CharField(max_length=20, unique=True)),
                ('crisp_value', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClassificationReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_name', models.CharField(max_length=255)),
                ('precision', models.FloatField()),
                ('recall', models.FloatField()),
                ('f1_score', models.FloatField()),
                ('support', models.IntegerField()),
                ('standards_baseline', models.CharField(blank=True, help_text='Standards benchmark used for comparison', max_length=100, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConfusionMatrix',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_name', models.CharField(max_length=255)),
                ('true_label', models.CharField(max_length=255)),
                ('predicted_label', models.CharField(max_length=255)),
                ('count', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelPerformanceComparison',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experiment_name', models.CharField(max_length=100)),
                ('test_date', models.DateTimeField(auto_now_add=True)),
                ('total_test_cases', models.IntegerField()),
                ('dataset_name', models.CharField(default='Standards_Compliant_Dataset', max_length=100)),
                ('standards_followed', models.JSONField(default=list, help_text='List of cybersecurity standards followed')),
                ('methodology_version', models.CharField(default='2.0_Standards_Compliant', max_length=50)),
                ('fuzzy_accuracy', models.FloatField()),
                ('fuzzy_precision', models.FloatField()),
                ('fuzzy_recall', models.FloatField()),
                ('fuzzy_f1_score', models.FloatField()),
                ('svm_accuracy', models.FloatField()),
                ('svm_precision', models.FloatField()),
                ('svm_recall', models.FloatField()),
                ('svm_f1_score', models.FloatField()),
                ('dt_accuracy', models.FloatField()),
                ('dt_precision', models.FloatField()),
                ('dt_recall', models.FloatField()),
                ('dt_f1_score', models.FloatField()),
                ('statistical_significance_p_value', models.FloatField(blank=True, null=True)),
                ('best_performing_model', models.CharField(max_length=50)),
                ('standards_compliance_score', models.FloatField(default=1.0, help_text='Compliance score against cybersecurity standards (0-1)')),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question_text', models.TextField()),
                ('iso27001_control', models.CharField(blank=True, help_text='ISO 27001 control reference (e.g., A.8.1.1)', max_length=20, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assets_management.assessmentcategory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('reason', models.TextField()),
                ('risk_appetite', models.CharField(choices=[('Very Low', 'Very Low'), ('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Very High', 'Very High')], default='Medium', help_text='ISO 27001 organizational risk appetite', max_length=20)),
                ('compliance_level', models.CharField(choices=[('Very High', 'Very High'), ('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='Medium', help_text='ISO 27001 compliance maturity level', max_length=20)),
                ('asset_value_mapping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets_management.assetvaluemapping')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetListing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('asset_type', models.CharField(max_length=255)),
                ('asset_category', models.CharField(blank=True, choices=[('Data', 'Data'), ('Applications', 'Applications'), ('Systems', 'Systems'), ('Networks', 'Networks'), ('Services', 'Services')], help_text='NIST Cybersecurity Framework asset category', max_length=50, null=True)),
                ('industry_sector', models.CharField(blank=True, choices=[('Financial Services', 'Financial Services'), ('Healthcare', 'Healthcare'), ('Government', 'Government'), ('Energy & Utilities', 'Energy & Utilities'), ('Manufacturing', 'Manufacturing'), ('Technology', 'Technology'), ('Retail', 'Retail'), ('Education', 'Education'), ('Transportation', 'Transportation'), ('Telecommunications', 'Telecommunications')], help_text='Industry sector for regulatory context', max_length=100, null=True)),
                ('compliance_framework', models.CharField(choices=[('SOX', 'Sarbanes-Oxley Act'), ('HIPAA', 'Health Insurance Portability and Accountability Act'), ('PCI-DSS', 'Payment Card Industry Data Security Standard'), ('GDPR', 'General Data Protection Regulation'), ('FISMA', 'Federal Information Security Management Act'), ('ISO 27001', 'ISO/IEC 27001:2013'), ('NIST CSF', 'NIST Cybersecurity Framework'), ('COBIT', 'Control Objectives for Information Technology'), ('None', 'No specific compliance requirement')], default='None', help_text='Primary regulatory/compliance framework', max_length=20)),
                ('classification', models.CharField(blank=True, choices=[('Low', 'Low Impact'), ('Moderate', 'Moderate Impact'), ('High', 'High Impact')], help_text='NIST SP 800-60 information impact level', max_length=255, null=True)),
                ('classification_value', models.FloatField(blank=True, help_text='Quantitative classification score (0-1 scale)', null=True)),
                ('confidentiality', models.FloatField(blank=True, help_text='Confidentiality impact score (0-1 scale)', null=True)),
                ('integrity', models.FloatField(blank=True, help_text='Integrity impact score (0-1 scale)', null=True)),
                ('availability', models.FloatField(blank=True, help_text='Availability impact score (0-1 scale)', null=True)),
                ('risk_index', models.FloatField(blank=True, help_text='Probability component from fuzzy logic (0-1 scale)', null=True)),
                ('likelihood', models.FloatField(blank=True, help_text='ISO 27005 likelihood of threat occurrence (0-1 scale)', null=True)),
                ('consequence', models.FloatField(blank=True, help_text='ISO 27005 consequence/impact level (0-1 scale)', null=True)),
                ('compliance_factor', models.FloatField(blank=True, help_text='Regulatory compliance impact multiplier', null=True)),
                ('industry_factor', models.FloatField(blank=True, help_text='Industry-specific risk factor', null=True)),
                ('calculated_risk_level', models.FloatField(blank=True, help_text='ISO 27005 calculated risk = Likelihood × Consequence × Environmental factors', null=True)),
                ('harm_value', models.FloatField(blank=True, help_text='Potential harm/impact value used in risk calculation', null=True)),
                ('mathematical_risk_category', models.CharField(blank=True, choices=[('Very Low Risk', 'Very Low Risk'), ('Low Risk', 'Low Risk'), ('Medium Risk', 'Medium Risk'), ('High Risk', 'High Risk'), ('Very High Risk', 'Very High Risk')], help_text='ISO 27005 risk category based on calculated risk level', max_length=20, null=True)),
                ('traditional_fuzzy_prediction', models.CharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], help_text='Traditional fuzzy logic classification prediction', max_length=20, null=True)),
                ('modern_svm_prediction', models.CharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], help_text='Modern SVM classification prediction', max_length=20, null=True)),
                ('modern_dt_prediction', models.CharField(blank=True, choices=[('Low', 'Low'), ('Moderate', 'Moderate'), ('High', 'High')], help_text='Modern Decision Tree classification prediction', max_length=20, null=True)),
                ('standards_version', models.CharField(default='NIST_CSF_1.1_ISO27001_2013_ISO27005_2018', help_text='Version of cybersecurity standards followed', max_length=100)),
                ('methodology', models.CharField(default='Standards_Compliant_Risk_Assessment', help_text='Risk assessment methodology used', max_length=100)),
                ('dt_predicted_risk_level', models.CharField(blank=True, max_length=10, null=True)),
                ('rf_predicted_risk_level', models.CharField(blank=True, max_length=10, null=True)),
                ('ensemble_predicted_risk_level', models.CharField(blank=True, max_length=10, null=True)),
                ('risk_treatment', models.TextField(blank=True, help_text='ISO 27005 risk treatment plan (Accept/Avoid/Transfer/Mitigate)', null=True)),
                ('comparison_performed_date', models.DateTimeField(blank=True, null=True)),
                ('last_analysis_date', models.DateTimeField(blank=True, null=True)),
                ('nist_function', models.CharField(choices=[('Identify', 'Identify'), ('Protect', 'Protect'), ('Detect', 'Detect'), ('Respond', 'Respond'), ('Recover', 'Recover')], default='Identify', help_text='Primary NIST CSF function for this asset', max_length=20)),
                ('asset_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets_management.assetvaluemapping')),
                ('owner_department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets_management.department')),
            ],
        ),
        migrations.CreateModel(
            name='ModelComparison',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experiment_name', models.CharField(default='Standard Comparison', max_length=100)),
                ('input_confidentiality', models.FloatField()),
                ('input_integrity', models.FloatField()),
                ('input_availability', models.FloatField()),
                ('input_asset_classification', models.FloatField()),
                ('fuzzy_prediction', models.CharField(max_length=20)),
                ('svm_prediction', models.CharField(max_length=20)),
                ('dt_prediction', models.CharField(max_length=20)),
                ('fuzzy_confidence', models.FloatField(blank=True, null=True)),
                ('svm_confidence', models.FloatField(blank=True, null=True)),
                ('dt_confidence', models.FloatField(blank=True, null=True)),
                ('expert_label', models.CharField(blank=True, max_length=20, null=True)),
                ('standards_compliant', models.BooleanField(default=True, help_text='Whether this comparison follows established standards')),
                ('comparison_date', models.DateTimeField(auto_now_add=True)),
                ('comparison_version', models.CharField(default='2.0_Standards_Compliant', max_length=50)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparisons', to='assets_management.assetlisting')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='assetlisting',
            index=models.Index(fields=['asset_category'], name='assets_mana_asset_c_20773d_idx'),
        ),
        migrations.AddIndex(
            model_name='assetlisting',
            index=models.Index(fields=['industry_sector'], name='assets_mana_industr_7e95e0_idx'),
        ),
        migrations.AddIndex(
            model_name='assetlisting',
            index=models.Index(fields=['compliance_framework'], name='assets_mana_complia_1c94d5_idx'),
        ),
        migrations.AddIndex(
            model_name='assetlisting',
            index=models.Index(fields=['classification'], name='assets_mana_classif_fe69b7_idx'),
        ),
        migrations.AddIndex(
            model_name='assetlisting',
            index=models.Index(fields=['mathematical_risk_category'], name='assets_mana_mathema_752319_idx'),
        ),
        migrations.AddIndex(
            model_name='assetlisting',
            index=models.Index(fields=['standards_version'], name='assets_mana_standar_cfbc04_idx'),
        ),
    ]
